integer #a1;
char #a2;
string #a3;
boolean #a4;
float #a5;
integer #i1;
integer #val1;

integer #d1;
integer #copie;
char #d2;
string #d3;
boolean #d4;
float #d5;

const integer #c1 := 1;
const char #c2 := 'a';
const string #c3 := "bcd";
const boolean #c4 := true;
const float #c5 := f6.9;
const string #c6 := "delete your life";

integer #v1[20];
char #v2[10];
boolean #v3[69];
float #v4[42];
integer #test[100];
integer#v5[3][10];

integer fn_test_int(integer #a9, char #c6, float #nr)
{
	return 1;
}

string fn_fn_string()
{
	return "string";
}

char fn_fn_char(char #k7)
{
	return 'a';
}

boolean fn_fn_bool(string #p3)
{
	return false;
}

float fn_fn_float(boolean #p5, string #p7)
{
	return f6.9;
}

integer fn_test(integer #g1, integer #g2, float #f9) 
{ 
 	return 23;
}

void fn_structuri()
{
	integer #var_11;
	integer #i6;
	char #z;
	float #var_33;
    float #var_44;
	
	if( #a1 >= #var_11 ) { 
        #a1 := 3;
        #z := 'a';
	}
	otherwise { 
		#var_44 := f4.1; 
	};
	
	while ( #var_11 == 11) { 
		if( #var_33 == f4.1 && #var_44 < f7.0 ) { 
			#var_44 := f5.1; 
		}; 
	};
	
	for( #i6 := #var_11+4 : #i6 <= 100 : #i6 := #i6 + 1 ){
		while ( #var_11 < 20) { 
		if( #var_33 == f4.1 && #var_44 < f7.7) { 
			#var_44 := f6.1; 
		}; 
		};
	};
	
}

fn_main

#a1 := 4;
#a1 := 4;
#copie := #a1;
#a2 := 'b';
#a3 := "am schimbat";
#a3 := "test";
#a3 := "test";
#a4 := false;
#a5 := f4.2; 

#d1 := 4;
#d2 := 'c';
#d3 := "inca o data";
#d4 := true;
#d5 := f3.45;

#a1 := #copie + #copie;
#a1 := #a1 + 1;
#a1 := #a1 + 1;
#a1 := #a1 + 1;
#a1 := #a1 + 1;
#a1 := #a1 + 1;
#a1 := 3;
#a1 := #a1 - 1;
#a1 := #a1 * 4 - 2 * 2 - 1;
#a1 := #copie + 2;
#a1 := #a1 / 2;
#a2 := #d2;
#a3 := #d3;
#a4 := #d4;
#a5 := #d5;


#v5[0][0] := 3;
#v5[1][2] := 4;
#v5[1][4] := 5;
#v5[2][8] := 6;
#v5[1][1] := #a1 + 4;
#v1[1] := 1 + (1 * 2);
#v4[0] := f4.2 + f1.1;


Eval(#a1*10 - 3);
Eval(#a1);
Eval(#c1);
Eval(#d5 + #a5);
Eval(#d5 / #a5 - f1.0 * f4.2 + f4.0);
TypeOf(#a1);
TypeOf(#a1 + 1 + 3);
TypeOf(#c2);
TypeOf(#c3);
TypeOf(#c4);
TypeOf( (2 + 1 ) * 3 - 1 >= #copie * 2);
TypeOf(not(6 < #copie));
TypeOf(not((3>4)) != not(3 > 4));
TypeOf(not(not((f1.1>f3.3)) == (f1.1>f3.3)));

TypeOf(#a1 + fn_test_int(#a1, #a2, #a5));

Eval( (2 + 1 ) * 3 - 1 >= #copie * 2);
Eval( 2 * 2 + 4 != #copie * 2 + 1);

Eval( #c5 + f0.1 > f6.9);
Eval( #a5 == #d5);
Eval( 2 == 1 + 1);
Eval( 2 == 1 + 1);
Eval( #a5 + f1.1 == #d5);
Eval(false);

Eval(not((3>4)) != not(3 > 4));
Eval(not(not((f1.1>f3.3)) == (f1.1>f3.3)));

Eval(not((5 + 5 * 5 - 10 / 2) <= 12 * 2 + 1));

#i1 := 0;

if (#i1 != 0) {
    #i1 := 420;
}
otherwise {
    #i1 := 69;
};

while (#i1 < 80) {
    #i1 := #i1 + 1;
};

for (#i1 := 0 : #i1 < 5 && #copie < 100: #i1 := #i1 + 1) {
    #val1 := #val1 + 10;
};

#d3 := #d3 + #a3;


fn_main_end